// Generated by CoffeeScript 1.9.3
(function() {
  'use strick';
  var Paginator, api;

  Paginator = (function() {
    function Paginator() {}

    Paginator.prototype.construtor = function(cfg) {
      return this.init(cfg);
    };

    Paginator.prototype.configure = function(cfg) {
      this.cfg = $.extend(true, {}, this.cfg || this.defaults, cfg);
      this.selector = this.cfg.selector;
      if (!this.selector) {
        throw 'Need selector to find the container!';
      }
      this.$paginator = $(this.selector);
      this.page = this.cfg.page;
      this.total = this.cfg.total;
      this.pageSize = this.cfg.pageSize;
      this.maxPage = this.cfg.maxPage;
      this.showPage = this.cfg.showPage;
      this.render();
      return this;
    };

    Paginator.prototype.addEvent = function() {
      this.$paginator.on('click.paginator.api', 'li a', (function(_this) {
        return function(e) {
          var $target, page, target;
          target = e.currentTarget;
          $target = $(target);
          page = $target.data('page-api');
          if ($target.hasClass('disable') || $target.hasClass('current')) {
            return;
          }
          if (page === '-') {
            page = _this.page - 1 > 0 ? _this.page - 1 : 1;
          } else if (page === '+') {
            page = _this.page + 1 < _this.maxPage ? _this.page + 1 : _this.maxPage;
          } else {
            page = parseInt(page, 10);
          }
          _this.cfg.pagination.page = page;
          _this.configure(_this.cfg);
          if (typeof _this.cfg.callback === 'function') {
            return _this.cfg.callback.call(target, page);
          }
        };
      })(this));
      return this;
    };

    Paginator.prototype.render = function() {
      var $ul, i, len, page, pages;
      pages = this.calcPageItems();
      $ul = $('<ul>');
      for (i = 0, len = pages.length; i < len; i++) {
        page = pages[i];
        $ul.append(this.createPageItem(page));
      }
      this.$paginator.html($ul);
      return this;
    };

    Paginator.prototype.calcPageItems = function() {
      var i, j, k, l, page, pages, range, rangeHalf, ref, ref1, ref2, ref3, ref4, ref5;
      pages = [];
      pages.push('-');
      if (this.maxPage > this.showPage) {
        for (page = i = 1, ref = this.maxPage; 1 <= ref ? i <= ref : i >= ref; page = 1 <= ref ? ++i : --i) {
          pages.push(page);
        }
      } else {
        if (this.page < this.showPage - 1) {
          for (page = j = 1, ref1 = this.showPage - 2; 1 <= ref1 ? j <= ref1 : j >= ref1; page = 1 <= ref1 ? ++j : --j) {
            pages.push(page);
          }
          pages.push('.');
        } else if (this.maxPage - this.page < this.showPage - 2) {
          papes.push(1);
          papes.push('.');
          for (page = k = ref2 = this.maxPage - this.showPage + 3, ref3 = this.maxPage; ref2 <= ref3 ? k <= ref3 : k >= ref3; page = ref2 <= ref3 ? ++k : --k) {
            pages.push(page);
          }
        } else {
          range = this.showPage - 4;
          rangeHalf = Math.floor(range / 2);
          pages.push(1);
          pages.push('.');
          for (page = l = ref4 = this.page - rangeHalf, ref5 = this.page - rangeHalf + range; ref4 <= ref5 ? l < ref5 : l > ref5; page = ref4 <= ref5 ? ++l : --l) {
            pages.push(page);
          }
          pages.push('.');
          pages.push(this.maxPage);
        }
      }
      pages.push('+');
      return pages;
    };

    Paginator.prototype.createItem = function(page) {
      var $a, clazz;
      $a = $('<a>').data('page-api', page).attr({
        'href': 'javascript:void(0)'
      });
      clazz = '';
      if (page === '.') {
        $a = '...';
      } else if (page === '-') {
        if (this.page === 1) {
          clazz = 'disable';
        }
        $a.addClass(clazz).append('Prev ');
      } else if (page === '+') {
        if (this.page === this.maxPage) {
          clazz = 'disable';
        }
        $a.addClass(clazz).append(' Next');
      } else {
        if (this.page === page) {
          clazz = 'current';
        }
        $a.addClass(clazz).text(page);
      }
      return $('<li>').append($a);
    };

    Paginator.prototype.defaults = {
      page: 1,
      total: 0,
      pageSize: 10,
      maxPage: 1,
      showPage: 10
    };

    return Paginator;

  })();

  api = function(cfg) {
    var paginator;
    paginator = $(cfg.selector).data('paginator');
    if (paginator != null) {
      paginator.configure(cfg);
    } else {
      paginator = new Paginator(cfg);
      $(cfg.selector).data('paginator', paginator);
    }
    return paginator;
  };

  window.paginator = api;

}).call(this);

//# sourceMappingURL=paginator.js.map
